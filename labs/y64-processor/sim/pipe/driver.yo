                            | #######################################################################
                            | # Test for copying block of size 50;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4d005000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23200000000000000 | 	irmovq $50, %rdx		# src and dst have 50 elements
0x014: 30f6b803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f71002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 80a500000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | # Modified version of ncopy.ys
                            | # 
                            | # ID: 517030910168
                            | # 
                            | # Name: Yu Xiqian
                            | # 
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | ##################################################################
                            | # You can modify this portion
                            | # All right, all right
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax		# count = 0;
0x03d: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x03f: 71a400000000000000   | 	jle Done		# if so, goto Done:
                            | 
0x048: 50a70000000000000000 | Loop:	mrmovq (%rdi), %r10	# read val from src...
0x052: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x05c: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x05e: 717100000000000000   | 	jle Npos		# if so, goto Npos:
0x067: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 	# Directly use iaddq rather than add/sub registers
0x071: 30fa0100000000000000 | Npos:	irmovq $1, %r10
0x07b: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
                            | 	# Directly use iaddq rather than add/sub registers
0x085: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
                            | 	# Directly use iaddq rather than add/sub registers
0x08f: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
                            | 	# Directly use iaddq rather than add/sub registers
0x099: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x09b: 764800000000000000   | 	jg Loop			# if so, goto Loop:
                            | # OK, OK
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x0a4:                      | Done:
0x0a4: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x0a5:                      | End:
                            | #/* $end ncopy-ys */
0x0a5:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 26.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x0a5:                      | check:
                            | 	# Return value test
0x0a5: 30fa1a00000000000000 | 	irmovq $26,%r10
0x0af: 61a0                 | 	subq %r10,%rax
0x0b1: 73cd00000000000000   | 	je checkb
0x0ba: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x0c4: 700b02000000000000   | 	jmp cdone
0x0cd:                      | checkb:
                            | 	# Code length check
0x0cd: 30f0a500000000000000 | 	irmovq EndFun,%rax
0x0d7: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x0e1: 6120                 | 	subq %rdx,%rax
0x0e3: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x0ed: 6102                 | 	subq %rax,%rdx
0x0ef: 750b01000000000000   | 	jge checkm
0x0f8: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x102: 700b02000000000000   | 	jmp cdone
0x10b:                      | checkm:
0x10b: 30f2b803000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x115: 30f31002000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x11f: 30f73200000000000000 | 	irmovq $50,%rdi  # Count
0x129: 6277                 | 	andq %rdi,%rdi
0x12b: 738901000000000000   | 	je checkpre         # Skip check if count = 0
0x134:                      | mcloop:
0x134: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x13e: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x148: 6160                 | 	subq %rsi,%rax
0x14a: 736601000000000000   | 	je  mok
0x153: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x15d: 700b02000000000000   | 	jmp cdone
0x166:                      | mok:
0x166: 30f00800000000000000 | 	irmovq $8,%rax
0x170: 6002                 | 	addq %rax,%rdx	  # dest ++
0x172: 6003                 | 	addq %rax,%rbx    # src++
0x174: 30f00100000000000000 | 	irmovq $1,%rax
0x17e: 6107                 | 	subq %rax,%rdi    # cnt--
0x180: 763401000000000000   | 	jg mcloop
0x189:                      | checkpre:
                            | 	# Check for corruption
0x189: 30f2b003000000000000 | 	irmovq Predest,%rdx
0x193: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x19d: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x1a7: 6120                 | 	subq %rdx,%rax
0x1a9: 73c501000000000000   | 	je checkpost
0x1b2: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x1bc: 700b02000000000000   | 	jmp cdone
0x1c5:                      | checkpost:
                            | 	# Check for corruption
0x1c5: 30f24805000000000000 | 	irmovq Postdest,%rdx
0x1cf: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x1d9: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x1e3: 6120                 | 	subq %rdx,%rax
0x1e5: 730102000000000000   | 	je checkok
0x1ee: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x1f8: 700b02000000000000   | 	jmp cdone
0x201:                      | checkok:
                            | 	# Successful checks
0x201: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x20b:                      | cdone:
0x20b: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x210:                      | 	.align 8
0x210:                      | src:
0x210: 0100000000000000     | 	.quad 1
0x218: feffffffffffffff     | 	.quad -2
0x220: 0300000000000000     | 	.quad 3
0x228: 0400000000000000     | 	.quad 4
0x230: 0500000000000000     | 	.quad 5
0x238: faffffffffffffff     | 	.quad -6
0x240: 0700000000000000     | 	.quad 7
0x248: 0800000000000000     | 	.quad 8
0x250: f7ffffffffffffff     | 	.quad -9
0x258: f6ffffffffffffff     | 	.quad -10
0x260: 0b00000000000000     | 	.quad 11
0x268: f4ffffffffffffff     | 	.quad -12
0x270: f3ffffffffffffff     | 	.quad -13
0x278: 0e00000000000000     | 	.quad 14
0x280: 0f00000000000000     | 	.quad 15
0x288: 1000000000000000     | 	.quad 16
0x290: 1100000000000000     | 	.quad 17
0x298: eeffffffffffffff     | 	.quad -18
0x2a0: 1300000000000000     | 	.quad 19
0x2a8: 1400000000000000     | 	.quad 20
0x2b0: ebffffffffffffff     | 	.quad -21
0x2b8: eaffffffffffffff     | 	.quad -22
0x2c0: e9ffffffffffffff     | 	.quad -23
0x2c8: e8ffffffffffffff     | 	.quad -24
0x2d0: e7ffffffffffffff     | 	.quad -25
0x2d8: 1a00000000000000     | 	.quad 26
0x2e0: e5ffffffffffffff     | 	.quad -27
0x2e8: e4ffffffffffffff     | 	.quad -28
0x2f0: 1d00000000000000     | 	.quad 29
0x2f8: e2ffffffffffffff     | 	.quad -30
0x300: e1ffffffffffffff     | 	.quad -31
0x308: 2000000000000000     | 	.quad 32
0x310: dfffffffffffffff     | 	.quad -33
0x318: 2200000000000000     | 	.quad 34
0x320: 2300000000000000     | 	.quad 35
0x328: dcffffffffffffff     | 	.quad -36
0x330: 2500000000000000     | 	.quad 37
0x338: daffffffffffffff     | 	.quad -38
0x340: d9ffffffffffffff     | 	.quad -39
0x348: 2800000000000000     | 	.quad 40
0x350: d7ffffffffffffff     | 	.quad -41
0x358: 2a00000000000000     | 	.quad 42
0x360: 2b00000000000000     | 	.quad 43
0x368: d4ffffffffffffff     | 	.quad -44
0x370: d3ffffffffffffff     | 	.quad -45
0x378: 2e00000000000000     | 	.quad 46
0x380: 2f00000000000000     | 	.quad 47
0x388: d0ffffffffffffff     | 	.quad -48
0x390: 3100000000000000     | 	.quad 49
0x398: 3200000000000000     | 	.quad 50
0x3a0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3b0:                      | 	.align 16
0x3b0:                      | Predest:
0x3b0: fadebc0000000000     | 	.quad 0xbcdefa
0x3b8:                      | dest:
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548:                      | Postdest:
0x548: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x550:                      | .align 8
                            | # Run time stack
0x550: 0000000000000000     | 	.quad 0
0x558: 0000000000000000     | 	.quad 0
0x560: 0000000000000000     | 	.quad 0
0x568: 0000000000000000     | 	.quad 0
0x570: 0000000000000000     | 	.quad 0
0x578: 0000000000000000     | 	.quad 0
0x580: 0000000000000000     | 	.quad 0
0x588: 0000000000000000     | 	.quad 0
0x590: 0000000000000000     | 	.quad 0
0x598: 0000000000000000     | 	.quad 0
0x5a0: 0000000000000000     | 	.quad 0
0x5a8: 0000000000000000     | 	.quad 0
0x5b0: 0000000000000000     | 	.quad 0
0x5b8: 0000000000000000     | 	.quad 0
0x5c0: 0000000000000000     | 	.quad 0
0x5c8: 0000000000000000     | 	.quad 0
                            | 
0x5d0:                      | Stack:
