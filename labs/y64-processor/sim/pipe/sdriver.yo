                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4d001000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f62801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7f800000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | # Modified version of ncopy.ys
                            | # 
                            | # ID: 517030910168
                            | # 
                            | # Name: Yu Xiqian
                            | # 
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | ##################################################################
                            | # You can modify this portion
                            | # All right, all right
                            | # Loop header
0x032: 6300                 | 		xorq %rax,%rax			# count = 0;
0x034: c0f20200000000000000 | 		iaddq $2, %rdx
0x03e: c0f2feffffffffffffff | Loop:	iaddq $-2, %rdx			# len--
0x048: 72c900000000000000   | 		jl Over
0x051: 73f400000000000000   | 		je Done
0x05a: 50a70000000000000000 | 		mrmovq (%rdi), %r10		# read val from src...
0x064: 50b70800000000000000 | 		mrmovq 8(%rdi), %r11	# read val from src...
0x06e: 40a60000000000000000 | 		rmmovq %r10, (%rsi)		# ...and store it to dst
0x078: 40b60800000000000000 | 		rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x082: 62aa                 | 		andq %r10, %r10			# val <= 0?
0x084: 719700000000000000   | 		jle NoAdd1				# if so, goto noadd
0x08d: c0f00100000000000000 | 		iaddq $1, %rax			# count++
                            | 		# Directly use iaddq rather than add/sub registers
0x097: 62bb                 | NoAdd1:	andq %r11, %r11
0x099: 71ac00000000000000   | 		jle NoAdd2
0x0a2: c0f00100000000000000 | 		iaddq $1, %rax
0x0ac:                      | NoAdd2:	# Directly use iaddq rather than add/sub registersS33
0x0ac: c0f71000000000000000 | 		iaddq $16, %rdi			# src++
                            | 		# Directly use iaddq rather than add/sub registers
0x0b6: c0f61000000000000000 | 		iaddq $16, %rsi			# dst++
0x0c0: 703e00000000000000   | 		jmp Loop				# goto Loop:
0x0c9: 6222                 | Over:	andq %rdx, %rdx
0x0cb: 73f400000000000000   | 		je Done
0x0d4: 50a70000000000000000 | 		mrmovq (%rdi), %r10
0x0de: 40a60000000000000000 | 		rmmovq %r10, (%rsi)
0x0e8: 62aa                 | 		andq %r10, %r10
                            | 		# jle Done
0x0ea: c0f00100000000000000 | 		iaddq $1, %rax			# count++
                            | # OK, OK
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x0f4:                      | Done:
0x0f4: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x0f5:                      | End:
                            | #/* $end ncopy-ys */
0x0f5:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x0f8:                      | 	.align 8
0x0f8:                      | src:
0x0f8: 0100000000000000     | 	.quad 1
0x100: feffffffffffffff     | 	.quad -2
0x108: fdffffffffffffff     | 	.quad -3
0x110: 0400000000000000     | 	.quad 4
0x118: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x120:                      | 	.align 16
0x120:                      | Predest:
0x120: fadebc0000000000     | 	.quad 0xbcdefa
0x128:                      | dest:
0x128: abefcd0000000000     | 	.quad 0xcdefab
0x130: abefcd0000000000     | 	.quad 0xcdefab
0x138: abefcd0000000000     | 	.quad 0xcdefab
0x140: abefcd0000000000     | 	.quad 0xcdefab
0x148:                      | Postdest:
0x148: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x150:                      | .align 8
                            | # Run time stack
0x150: 0000000000000000     | 	.quad 0
0x158: 0000000000000000     | 	.quad 0
0x160: 0000000000000000     | 	.quad 0
0x168: 0000000000000000     | 	.quad 0
0x170: 0000000000000000     | 	.quad 0
0x178: 0000000000000000     | 	.quad 0
0x180: 0000000000000000     | 	.quad 0
0x188: 0000000000000000     | 	.quad 0
0x190: 0000000000000000     | 	.quad 0
0x198: 0000000000000000     | 	.quad 0
0x1a0: 0000000000000000     | 	.quad 0
0x1a8: 0000000000000000     | 	.quad 0
0x1b0: 0000000000000000     | 	.quad 0
0x1b8: 0000000000000000     | 	.quad 0
0x1c0: 0000000000000000     | 	.quad 0
0x1c8: 0000000000000000     | 	.quad 0
                            | 
0x1d0:                      | Stack:
